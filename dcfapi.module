<?php
/**
 * @file
 * This gets your cloudflare data into JSON format
 */

/**
 * Implements hook_menu().
 *
 * Define menu items and page callbacks. This hook enables modules to register
 * paths in order to define how URL requests are handled. Paths may be registered
 * for URL handling only, or they can register a link to be placed in a menu
 * (usually the Navigation menu). A path and its associated information is
 * commonly called a "menu router item". This hook is rarely called (for example,
 * when modules are enabled), and its results are cached in the database.
 * hook_menu() implementations return an associative array whose keys define
 * paths and whose values are an.
 *
 * @return
 *   An array of menu items. Each menu item has a key corresponding to the Drupal
 *   path being registered. The corresponding array value is an associative array
 *   that may contain the following key-value pairs: "title": Required. The
 *   untranslated title of the menu item. "title callback": Function to generate
 *   the title; defaults to t(). If you require only the raw string to be output,
 *   set this to FALSE. "title arguments": Arguments to send to t() or your
 *   custom callback, with path component substitution as described above.
 */
/**
* Implementation of hook_menu().
*/
function dcfapi_menu() {
  //Admin Page
  $items['admin/config/people/dcfapi'] = array(
    'title' => 'Drupal Cloudflare API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dcfapi_admin'),
    'access arguments' => array('administer drupal cloudflare api'),
    'description' => t('Configure the Drupal Cloudflare API settings.')
  );
  //Payload
  $items['dcfapi'] = array(
    'title' => 'Drupal CloudFlare API',
    'page callback' => 'dcfapi_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}
/**
* Implements hook_permission().
*/
function dcfapi_permission() {
  return array(
    'administer drupal cloudflare api' => array(
      'title' => t('Administer Cloudflare'),
      'description' => t('Perform administration tasks for Cloudflare.'),
    ),
  );
}
function dcfapi_admin() {
  $form = array();

  $form['dcfapi_email'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#description' => t('Email Address for your CloudFlare account'),
    '#default_value' => variable_get('dcfapi_email', ''),
    '#required' => TRUE,
  );
  $form['dcfapi_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#description' => t('API key for your Cloudflare account.'),
    '#default_value' => variable_get('dcfapi_key', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function dcfapi_admin_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  variable_set('dcfapi_email', $form_values['api_email']);
  variable_set('dcfapi_key', $form_values['api_key']);
}

function dcfapi_page() {
	include 'inc/class_cloudflare.php';
	$cf_email = variable_get('dcfapi_email', FALSE);
	$cf_api_key = variable_get('dcfapi_key', FALSE);
	$cf = new cloudflare_api($cf_email , $cf_api_key);
	$domains = ['poeticsystems.com', 'friendswooddevelopment.com'];
	$response = [];


	foreach ($domains as $domain) {
		$response[$domain] = $cf->stats("{$domain}", $cf::INTERVAL_7_DAYS);		
	}

	print json_encode($response);

}